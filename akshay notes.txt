public boolean isGreaterThanTwo(int inputValue) {
	TE.test(2)
		.case(new equals(inputvalue, 100),
			new equals()

	given (input = i) ->
		[f(i) -> value e]

	if (inputValue > 2) {
		TE.log(1, "true");
		return true;
	} // 1
	else {
		TE.log(2, "false");
		
		TE -> cases where class = this
						  method = this method
		
		for case in cases ->
			test case (output)
			report pass/failed

		return false;
	} // 2

}



function (inputs...) ->
	testengine.build(2)
		.case(equals(input, blah), equals(output, blah)); vcba
	test branches 2
	test input expect output

	{logic}		
	log input, output, 1/2

	{logic}
	log input, output, 2/2

<- return value

1) testing
	{2-11}
2) code coverage
	
3) reporting

[passed/failed] [%date% %time%] [class] [method] [arguments] [expected] [output]


testing -> log file
applications (log file) -> code coverage


test(function, input, expected input, output, expected output):
	if <input = expected input>
		return f(input) -> <output = expected output>


1) testing framework
	a. test engine
	b. predicates
	c. connection to reporting framework
2) reporting framework
3) code coverage framework
4) documentation
5) architecture
6) test cases
7) requirements traceability matrix

correctness
performance
maintainability
usability
elegance